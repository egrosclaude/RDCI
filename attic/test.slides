<!-- INCLUDE src/reveal.header -->

<section>
<h2>Snap test</h2>
<ul>
<li class="fragment">Veremos cómo interactuar</li>
<li class="fragment">con fragmentos de texto</li>
<li class="fragment">y gráficos animados</li>
</ul>

<div id="snaptest" class="snapsvg" width="100%" height="100%">
	<svg viewBox="0 0 600 400" width="100%" height="100%"></svg>
	<!--
	{
		"initialize" : "function(container) {
			var svg = Snap('#snaptest svg');
			var c = svg.circle(20,20,20).attr({fill: '#BAD05A'});
 			var d = svg.rect(40,40,70,80,5).attr({fill: '#5ABAD0'});

			var router = function(x,y) { return svg.image('img/router.svg',x,y,60,50).drag(); };
			var host = function(x,y) { return svg.image('img/host1.svg',x,y,80,100).drag(); };

			var h1 = host(300,80).attr({opacity:0});
			var h2 = host(500,80).attr({opacity:0});
			var r1 = router(400,80).attr({opacity:0});
			var redon = function() { h1.attr({opacity: 1}); h2.attr({opacity: 1}); r1.attr({opacity: 1}); };
			var redoff = function() { h1.attr({opacity: 0}); h2.attr({opacity: 0}); r1.attr({opacity: 0}); };

			var f1 = function() {c.animate({fill:'#a01020'},1000); d.animate({x:150, y:150},100)};
			var f2 = function() {c.animate({r:4, cx:200, cy:100, },500)};

			var f2back = function() {c.animate({r:20, cx:20, cy:20},500)};
			var f1back = function() {c.animate({cx:20, cy:20, fill:'#BAD05A'},1000); d.animate({x:40, y:40},100)};
			
			var shown = { 'frag1' : f1, 'frag2' : f2, 'red' : redon };
			var hidden = { 'frag1' : f1back, 'frag2' : f2back, 'red' : redoff };

			Reveal.addEventListener('fragmentshown',function(event){if(typeof shown[event.fragment.id] === 'function') {shown[event.fragment.id]()};});
                       	Reveal.addEventListener('fragmenthidden',function(event){if(typeof hidden[event.fragment.id] === 'function') {hidden[event.fragment.id]()};});
		}"
	}
	-->
</div>
	<span class="fragment" id="frag1" data-markdown></span>
	<span class="fragment" id="frag2" data-markdown></span>
	<span class="fragment" id="red"></span>
<aside data-markdown class="coursemod">
## Animaciones en SVG

El código HTML de las transparencias incluye elementos de clase "fragmento". Las acciones de navegar las páginas usando las flechas de dirección inducen eventos de "fragmento visible" o "fragmento oculto".

Esos eventos pueden usarse para disparar funciones de transformación del SVG. En esta transparencia, luego de los tres fragmentos de texto existen tres fragmentos ocultos asociados a funciones de transformación. 

* El primer evento de fragmento visible dispara cambio de color del círculo, y cambia la posición del rectángulo.
* El segundo cambia la posición y tamaño del círculo.
* El tercero inserta gráficos externos visibles.
* Estos gráficos externos son movibles usando el mouse.
* Todos los eventos tienen funciones inversas para restituir la presentación original del gráfico SVG.
* Las transformaciones tienen atributos, valores y velocidades independientes y pueden ser reutilizadas.


### TODO

* Alguna forma fácil de revertir una transformación sin tener que escribir la función inversa.
</aside>
</section>

<section>
<!-- 
<h2>Snap zoom</h2>
-->
<div id="snaptest2" class="snapsvg" width="100%" height="100%">
	<svg viewBox="0 0 600 400" width="100%" height="100%"></svg>
	<!--
	{
		"initialize" : "function(container) {
			var svg = Snap('#snaptest2 svg');

			var router = function(x,y) { return svg.image('img/router.svg',x,y,60,50).drag(); };
			var host = function(x,y) { return svg.image('img/host1.svg',x,y,80,100).drag(); };

			var h1 = host(100,80);
			var h2 = host(400,80);
			var r1 = router(250,80);

			var zoomin1 = function() { svg.animate({x: '0px', y:'0px', width: '500px', height: '380px'},1000) };
			var zoomout1 = function() { svg.animate({x: '0px', y: '0px', width: '600px', height: '400px'},1000) };

			var zoomin2 = function() { svg.animate({ viewBox: '100 20 200 100' }, 800); };
			var zoomout2 = function() { svg.animate({ viewBox: '0 0 600 400' }, 800); };

			var zoomin3 = function() { Snap.animate([0,0,600,400],[50,50,200,200],function(val) { svg.attr({viewBox: val})},500)};
			var zoomout3 = function() { Snap.animate([50,50,200,200],[0,0,600,400],function(val) { svg.attr({viewBox: val})},500)};

			function zoom(from, to, dur) { Snap.animate(from,to,function(val) { svg.attr({viewBox: val})},dur) }; 
			function zoomback(from, to, dur) { Snap.animate(to,from,function(val) { svg.attr({viewBox: val})},dur) }; 

			function lookat(x, dur) { svg.animate({viewBox: x.getBBox().vb}, dur); };

			var zoomin4 = function() { zoom([50,50,200,200],[150,50,200,200],800); };
			var zoomout4 = function() { zoomback([50,50,200,200],[150,50,200,200],800); };

			var zoomin15 = function() { lookat(h1,800); }; 
			var zoomout15 = function() { svg.animate({viewBox: '0 0 600 400'},800); };
			var zoomin25 = function() { lookat(r1,800); }; 
			var zoomout25 = function() { lookat(h1,800); };
			var zoomin35 = function() { lookat(h2,800); }; 
			var zoomout35 = function() { lookat(r1,800); };


			var shown = { 'fragz' : zoomin15, 'fragz2' : zoomin25, 'fragz3' : zoomin35};
			var hidden = { 'fragz' : zoomout15, 'fragz2' : zoomout25, 'fragz3' : zoomout35};

			Reveal.addEventListener('fragmentshown',function(event){
				if(typeof shown[event.fragment.id] === 'function') {
					shown[event.fragment.id]();
				}
			});
                       	Reveal.addEventListener('fragmenthidden',function(event){if(typeof hidden[event.fragment.id] === 'function') {hidden[event.fragment.id]()};});
		}"
	}
	-->
</div>
<span class="fragment" id="fragz"></span>
<span class="fragment" id="fragz2"></span>
<span class="fragment" id="fragz3"></span>
</section>


<!--
<section data-background="img/background03.jpg">
<h2 class="frosted">C'est tout</h2>
</section>
-->

<!-- INCLUDE src/reveal.trailer -->
